searchState.loadedDescShard("anvil_zksync_common", 0, "Resolving the selectors (both method &amp; event) with …\nMacro to print a formatted message to stderr.\nMacro to print a formatted message (with newline) to …\nMacro to print an error message.\nMacro to print a formatted message to stdout.\nMacro to print a formatted message (with a newline) to …\nMacro to print a warning message.\nUtility functions for writing to stdout and stderr.\nLoads the known contact addresses from the JSON file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the given address is a precompile based on …\nChecks if the given address is a system contract based on …\nA general purpose cache.\nCache configuration options.\nCache type for the node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the cached full/minimal block for the provided …\nReturns the cached full/minimal block for the provided …\nReturns the cached raw transactions for the provided block …\nReturns the cached bridge addresses for the provided hash.\nReturns the cached confirmed tokens.\nReturns the cached resolved function/event selector for …\nReturns the cached transaction for the provided hash.\nCache a full/minimal block for the provided hash.\nCache the raw transactions for the provided block number.\nCache a resolver function for the provided selector.\nCache a transaction for the provided hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new cache with the provided config.\nCache default bridge addresses.\nCache confirmed tokens\nA client that can request API data from …\nFetches a function signature given the selector using …\nDecodes the given function or event selector using …\nDecodes the given function, error or event selectors using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new client with default settings\nChoices for whether to use colored output.\nDefault styles for WARNING and ERROR messages.\nThe output mode: either normal output or completely quiet.\nA shell abstraction that tracks verbosity level, an output …\nWhether to use colors.\nPrint an error message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a lock to the global shell.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new shell with default settings:\nWhether to output anything at all.\nPrint a string to stderr.\nPrint a string to stdout.\nPrint a line (with a newline) to stderr.\nPrint a line (with a newline) to stdout.\n(Optional) Set the global shell with a custom …\nVerbosity level.\nPrint a warning message.\nFormats a <code>U256</code> value as Ether without capping decimal …\nFormats a <code>U256</code> value as Gwei without capping decimal …\nReads the JSON file at the specified path and deserializes …\nWrites the given serializable object as JSON to the …\nPre-deploy contract data\nEVM‐predeploy manager function Function with signature …\nEVM‐predeploy manager function Container type for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")